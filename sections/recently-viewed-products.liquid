{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'section-related-products.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- unless section.settings.quick_add == 'none' -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
{%- endunless -%}

{%- if section.settings.quick_add == 'standard' -%}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- if section.settings.quick_add == 'bulk' -%}
  <script src="{{ 'quick-add-bulk.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'price-per-item.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quick-order-list.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }


  .recently-viewed-products .card--standard.card--media .card__inner .card__information {
      display: block;
  }


  .recently-viewed-products .card--media .card__inner .card__content {
    opacity: 0;;
  }

  .color-scheme-1.gradient.main-recent {
    background: #F7F7FF;
}

.color-scheme-1.gradient.main-recent h2.recently-viewed-products__heading {
    color: #010005;
    text-align: center;
    font-family: Montserrat;
    font-size: 44px;
    font-style: normal;
    font-weight: 700;
    line-height: normal;
    text-transform: uppercase;
    margin: 0 0 50px;
}

  .recently-viewed-products .card--standard .card__inner {
  background: #FFFFFF;
}
{%- endstyle -%}

<div class="color-{{ section.settings.color_scheme }} gradient main-recent">
  <div 
    class="recently-viewed-products page-width section-{{ section.id }}-padding isolate{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
    id="RecentlyViewed-{{ section.id }}"
  >
    <h2 class="recently-viewed-products__heading inline-richtext {{ section.settings.heading_size }}">
      {{ section.settings.heading }}
    </h2>
    
    <ul
      class="grid product-grid grid--{{ section.settings.columns_desktop }}-col-desktop grid--{{ section.settings.columns_mobile }}-col-tablet-down {% if section.settings.quick_add == 'bulk' %} collection-quick-add-bulk{% endif %}"
      role="list"
      id="RecentlyViewedGrid-{{ section.id }}"
    >
      <!-- Products injected via JS -->
    </ul>

   
  </div>

  {% if section.settings.image_shape == 'arch' %}
    {{ 'mask-arch.svg' | inline_asset_content }}
  {%- endif -%}
</div>

<script>
(function() {
  const SECTION_ID = '{{ section.id }}';
  const RECENTLY_VIEWED_KEY = 'recentlyViewedProducts';
  const MAX_PRODUCTS = {{ section.settings.products_to_show }};

  const grid = document.getElementById(`RecentlyViewedGrid-${SECTION_ID}`);
  const errorDiv = document.getElementById(`RecentlyViewedError-${SECTION_ID}`);

  // Get recently viewed from localStorage
  function getRecentlyViewed() {
    try {
      const viewed = JSON.parse(localStorage.getItem(RECENTLY_VIEWED_KEY)) || [];
      {% if product %}
        return viewed.filter(h => h !== '{{ product.handle }}');
      {% else %}
        return viewed;
      {% endif %}
    } catch(e) {
      return [];
    }
  }

  // Save current product
  {% if product %}
    const currentHandle = '{{ product.handle }}';
    let rv = getRecentlyViewed();
    rv = [currentHandle, ...rv.filter(h => h !== currentHandle)].slice(0, MAX_PRODUCTS*2);
    localStorage.setItem(RECENTLY_VIEWED_KEY, JSON.stringify(rv));
  {% endif %}

  // Build Dawn card HTML
function createCardHTML(product) {
  const li = document.createElement('li');
  li.className = 'grid__item';

  li.innerHTML = `
    <div class="card-wrapper product-card-wrapper underline-links-hover">
      <div class="card card--standard card--media" style="--ratio-percent: 100%;">
        <div class="card__inner color-scheme-2 gradient ratio" style="--ratio-percent: 100%;">
          <div class="card__media">
            <div class="media media--transparent media--hover-effect">
              <img src="${product.featured_image}" alt="${product.title}" class="motion-reduce" loading="lazy" width="700" height="700">
            </div>
          </div>

          <div class="card__content">
            <div class="card__information">
              <h3 class="card__heading">
                <a href="${product.url}" class="full-unstyled-link">
                  ${product.title}
                </a>
              </h3>
            </div>
            <div class="card__badge bottom left"></div>
          </div>
        </div>

        <div class="card__content">
          <div class="card__information">
            <div class="card-information">
              <span class="caption-large light"></span>
              <div class="price">
                <div class="price__container">
                  <div class="price__regular">
                    <span class="price-item price-item--regular">
                      ${product.price}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            <h3 class="card__heading h5">
              <a href="${product.url}" class="full-unstyled-link">
                ${product.title}
              </a>
            </h3>

            <div class="product-sku-stock">
              <span class="product-sku">
                SKU: <strong>${product.variants[0].sku || ''}</strong>
              </span>
              <span class="product-stock in-stock">
                <span class="stock-dot"></span> In Stock
              </span>
            </div>
          </div>

          <div class="quick-add no-js-hidden">
            <product-form data-section-id="recently-viewed-${product.id}">
              <form method="post" action="/cart/add" id="quick-add-${product.variants[0].id}" accept-charset="UTF-8" class="form" enctype="multipart/form-data" novalidate>
                <input type="hidden" name="form_type" value="product">
                <input type="hidden" name="utf8" value="âœ“">
                <input type="hidden" name="id" value="${product.variants[0].id}" class="product-variant-id">

                <button id="quick-add-${product.variants[0].id}-submit" type="submit" name="add" class="quick-add__submit button button--full-width button--secondary" aria-haspopup="dialog" aria-live="polite" data-sold-out-message="true">
                  <span>Add to cart</span>
                  <span class="sold-out-message hidden">Sold out</span>
                  <div class="loading__spinner hidden">
                    <svg xmlns="http://www.w3.org/2000/svg" class="spinner" viewBox="0 0 66 66">
                      <circle stroke-width="6" cx="33" cy="33" r="30" fill="none" class="path"></circle>
                    </svg>
                  </div>
                </button>
                <input type="hidden" name="product-id" value="${product.id}">
                <input type="hidden" name="section-id" value="recently-viewed-${product.id}">
              </form>
            </product-form>
          </div>

          <div class="card__badge bottom left"></div>
        </div>
      </div>
    </div>
  `;

  return li;
}

  async function loadProducts() {
    const handles = getRecentlyViewed().slice(0, MAX_PRODUCTS);
    if (!handles.length) return;

    for (const handle of handles) {
      try {
        const res = await fetch(`/products/${handle}.js`);
        if (!res.ok) continue;
        const product = await res.json();

        console.log('Loaded product:', product);

        const card = createCardHTML({
          title: product.title,
          url: `/products/${product.handle}`,
          featured_image: product.images[0] || '',
          vendor: product.vendor,
          price: `$${(product.price / 100).toFixed(2)}`,
          variants: product.variants
        });

        grid.appendChild(card);
      } catch(err) {
        console.warn(`Failed to load product ${handle}`, err);
      }
    }
  }

  document.addEventListener('DOMContentLoaded', loadProducts);
})();
</script>

{% schema %}
{
  "name": "Recently viewed products",
  "tag": "section",
  "class": "section",
  "settings": [
    { "type": "inline_richtext", "id": "heading", "default": "Recently viewed products", "label": "Heading" },
    { "type": "select", "id": "heading_size", "default": "h2", "label": "Heading size", "options":[
      { "value":"h1","label":"H1" },
      { "value":"h2","label":"H2" },
      { "value":"h0","label":"H0" },
      { "value":"hxl","label":"Extra large" },
      { "value":"hxxl","label":"Extra extra large" }
    ]},
    { "type": "range","id":"products_to_show","min":2,"max":10,"step":1,"default":4,"label":"Products to show"},
    { "type": "range","id":"columns_desktop","min":1,"max":6,"step":1,"default":4,"label":"Columns (desktop)"},
    { "type": "select","id":"columns_mobile","default":"2","label":"Columns (mobile)","options":[
      { "value":"1","label":"1 column"},
      { "value":"2","label":"2 columns"}
    ]},
    { "type":"color_scheme","id":"color_scheme","label":"Color scheme","default":"scheme-1"},
    { "type":"select","id":"image_ratio","options":[
      {"value":"adapt","label":"Adapt to image"},
      {"value":"portrait","label":"Portrait"},
      {"value":"square","label":"Square"}
    ],"default":"adapt","label":"Image ratio"},
    { "type":"select","id":"image_shape","options":[
      {"value":"default","label":"Default"},
      {"value":"arch","label":"Arch"},
      {"value":"blob","label":"Blob"},
      {"value":"chevronleft","label":"Chevron left"},
      {"value":"chevronright","label":"Chevron right"},
      {"value":"diamond","label":"Diamond"},
      {"value":"parallelogram","label":"Parallelogram"},
      {"value":"round","label":"Round"}
    ],"default":"default","label":"Image shape"},
    { "type":"checkbox","id":"show_secondary_image","default":false,"label":"Show secondary image"},
    { "type":"checkbox","id":"show_vendor","default":false,"label":"Show vendor"},
    { "type":"checkbox","id":"show_rating","default":false,"label":"Show product rating"},
    { "type":"select","id":"quick_add","default":"none","label":"Quick add","options":[
      {"value":"none","label":"None"},
      {"value":"standard","label":"Standard"},
      {"value":"bulk","label":"Bulk"}
    ]},
    { "type":"text","id":"error_message","label":"Error message"},
    { "type":"range","id":"padding_top","min":0,"max":100,"step":4,"unit":"px","label":"Padding top","default":36},
    { "type":"range","id":"padding_bottom","min":0,"max":100,"step":4,"unit":"px","label":"Padding bottom","default":36}
  ],
  "presets":[{"name":"Recently viewed products"}]
}
{% endschema %}
