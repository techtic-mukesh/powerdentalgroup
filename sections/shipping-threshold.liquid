{% comment %}
  Save this as: sections/shipping-threshold.liquid
{% endcomment %}

{{ 'shipping-threshold.css' | asset_url | stylesheet_tag }}

{% if template.name == 'collection' or template.name == 'product' or template.name == 'cart' %}
<div class="shipping-threshold-wrapper" data-threshold="{{ section.settings.shipping_threshold }}">
  <div class="shipping-threshold-container">
    <div class="shipping-threshold-content">
      <p class="shipping-threshold-text">
        <span class="threshold-message"></span>
      </p>
      <div class="progress-circle">
        <svg class="progress-ring" width="90" height="90">
          <circle
            class="progress-ring-bg"
            stroke="#f0f0f0"
            stroke-width="8"
            fill="transparent"
            r="37"
            cx="45"
            cy="45"
          />
          <circle
            class="progress-ring-circle"
            stroke="{{ section.settings.progress_color }}"
            stroke-width="8"
            fill="transparent"
            r="37"
            cx="45"
            cy="45"
          />
        </svg>
        <div class="progress-percentage">0%</div>
      </div>
      <div class="progress-bar-container">
        <div class="progress-bar" style="background-color: {{ section.settings.bar_color }};"></div>
      </div>
    </div>
    <div class="threshold-cart">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 93.264 89.804" aria-hidden="true" focusable="false" class="Vtl-GoalTriggerIcon__svg"><circle cx="34.986" cy="80.801" r="9.002"></circle><circle cx="64.73" cy="80.801" r="9.002"></circle><path d="M29.935 69.839q-1.343 0-2.686-.023c-3.583-.07-6.08-1.852-6.85-4.89-.502-1.98-.955-4.005-1.393-5.963-.21-.94-.42-1.877-.632-2.804l-7.992-34.668-.006-.022-2.913-12.64-.006-.023L6.972 6.7a37.257 37.257 0 0 0-4.204-1.493c-.38-.119-.732-.228-1.036-.326A2.5 2.5 0 0 1 3.27.122c.289.093.623.197.983.309C8.66 1.8 11.177 2.683 11.68 4.863l3.126 13.562 71.812.639a6.668 6.668 0 0 1 6.233 8.98L79.296 64.739a7.678 7.678 0 0 1-7.175 4.998h-31.86c-1.708 0-3.416.026-5.124.051-1.706.025-3.45.051-5.202.051ZM15.961 23.436l7.285 31.6c.216.938.427 1.885.64 2.836.43 1.925.875 3.914 1.36 5.824.102.407.274 1.084 2.099 1.12 2.56.05 5.181.011 7.718-.028 1.732-.025 3.465-.05 5.198-.05h31.86a2.661 2.661 0 0 0 2.485-1.732L88.16 26.311a1.669 1.669 0 0 0-1.565-2.247Z"></path><path d="M61.037 47.18h-7.733v7.638a2.597 2.597 0 0 1-2.598 2.597h-.115a2.597 2.597 0 0 1-2.597-2.597v-7.637h-7.736a2.597 2.597 0 0 1-2.597-2.598 2.597 2.597 0 0 1 2.597-2.597h7.736V34.35a2.597 2.597 0 0 1 2.597-2.598h.115a2.597 2.597 0 0 1 2.597 2.598v7.637h7.734a2.597 2.597 0 0 1 2.598 2.597 2.597 2.597 0 0 1-2.598 2.598Z"></path></svg>
        <div class="cart-progress-percentage"></div>
    </div>
  </div>
</div>

<script>
(function() {
  const wrapper = document.querySelector('.shipping-threshold-wrapper');
  if (!wrapper) return;
  
  const threshold = parseFloat(wrapper.dataset.threshold);
  const messageEl = wrapper.querySelector('.threshold-message');
  const percentageEl = wrapper.querySelector('.progress-percentage');
  const cartPercentageEl = wrapper.querySelector('.cart-progress-percentage');
  const progressBar = wrapper.querySelector('.progress-bar');
  const circle = wrapper.querySelector('.progress-ring-circle');
  const radius = circle.r.baseVal.value;
  const circumference = radius * 2 * Math.PI;
  
  let autoCloseTimeout = null;
  let isInitialLoad = true;
  
  circle.style.strokeDasharray = `${circumference} ${circumference}`;
  circle.style.strokeDashoffset = circumference;

  // Hover functionality
  wrapper.addEventListener('mouseenter', function() {
    wrapper.classList.add('open');
    clearTimeout(autoCloseTimeout);
  });

  wrapper.addEventListener('mouseleave', function() {
    wrapper.classList.remove('open');
  });

  // Function to temporarily open widget
  function temporarilyOpen() {
    wrapper.classList.add('open');
    clearTimeout(autoCloseTimeout);
    autoCloseTimeout = setTimeout(function() {
      wrapper.classList.remove('open');
    }, 3000);
  }

  function formatMoney(cents) {
    return '$' + (cents / 100).toFixed(2);
  }

  function updateProgress() {
    fetch('/cart.js')
      .then(res => res.json())
      .then(cart => {
        const cartTotal = cart.total_price / 100;
        const remaining = threshold - cartTotal;
        const percentage = Math.min((cartTotal / threshold) * 100, 100);
        
        // Update text message
        if (cartTotal >= threshold) {
          messageEl.innerHTML = `<strong style="color: #0033a0;">ðŸŽ‰ Congratulations!</strong><br><span style="color: #010005;">You've unlocked free shipping!</span>`;
          wrapper.classList.add('threshold-reached');
        } else {
          messageEl.innerHTML = `Spend <strong>${formatMoney(remaining * 100)}</strong> more to get<br>Free shipping discount!`;
          wrapper.classList.remove('threshold-reached');
        }
        
        // Update percentage display
        percentageEl.textContent = Math.round(percentage) + '%';
        if (cartPercentageEl) {
          cartPercentageEl.textContent = Math.round(percentage) + '%';
        }
        
        // Update progress bar
        progressBar.style.width = percentage + '%';
        
        // Update circle progress
        const offset = circumference - (percentage / 100) * circumference;
        circle.style.strokeDashoffset = offset;
        
        // Change color when threshold reached
        if (cartTotal >= threshold) {
          circle.style.stroke = '#0033a0';
          progressBar.style.backgroundColor = '#0033a0';
        } else {
          circle.style.stroke = '{{ section.settings.progress_color }}';
          progressBar.style.backgroundColor = '{{ section.settings.bar_color }}';
        }
        
        // Temporarily open on cart update (but not on initial load)
        if (!isInitialLoad) {
          temporarilyOpen();
        }
        isInitialLoad = false;
      })
      .catch(err => console.error('Shipping threshold error:', err));
  }

  // Initial update
  updateProgress();
  
  // Listen for all possible cart update events
  document.addEventListener('cart:updated', updateProgress);
  document.addEventListener('cart:refresh', updateProgress);
  
  // Dawn theme specific - cart drawer updates
  const cartDrawer = document.querySelector('cart-drawer');
  if (cartDrawer) {
    const observer = new MutationObserver(function(mutations) {
      updateProgress();
    });
    observer.observe(cartDrawer, { 
      childList: true, 
      subtree: true 
    });
  }
  
  // Listen for quantity changes in cart
  document.addEventListener('change', function(e) {
    if (e.target.name && (e.target.name.includes('quantity') || e.target.name.includes('updates'))) {
      setTimeout(updateProgress, 500);
    }
  });
  
  // Listen for click events (add to cart, remove buttons)
  document.addEventListener('click', function(e) {
    const target = e.target.closest('button, a');
    if (target && (
      target.name === 'add' ||
      target.classList.contains('cart-item__remove') ||
      target.classList.contains('remove-item') ||
      target.textContent.toLowerCase().includes('remove')
    )) {
      setTimeout(updateProgress, 500);
    }
  });
  
  // Fetch interceptor for cart updates
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    const promise = originalFetch.apply(this, args);
    const url = args[0];
    
    if (typeof url === 'string' && (
      url.includes('/cart/add') ||
      url.includes('/cart/update') ||
      url.includes('/cart/change') ||
      url.includes('/cart/clear')
    )) {
      promise.then(() => setTimeout(updateProgress, 300));
    }
    
    return promise;
  };
})();
</script>
{% endif %}

{% schema %}
{
  "name": "Shipping Threshold",
  "settings": [
    {
      "type": "number",
      "id": "shipping_threshold",
      "label": "Free Shipping Threshold",
      "default": 340,
      "info": "Enter the amount needed for free shipping (e.g., 340 for $340)"
    },
    {
      "type": "color",
      "id": "progress_color",
      "label": "Progress Circle Color",
      "default": "#FFC107"
    },
    {
      "type": "color",
      "id": "bar_color",
      "label": "Progress Bar Color",
      "default": "#FFC107"
    },
    {
      "type": "select",
      "id": "position",
      "label": "Position",
      "options": [
        {
          "value": "top",
          "label": "Top of page"
        },
        {
          "value": "bottom",
          "label": "Bottom of page"
        }
      ],
      "default": "top"
    }
  ],
  "presets": [
    {
      "name": "Shipping Threshold"
    }
  ]
}
{% endschema %}

{% stylesheet %}
.shipping-threshold-wrapper {
  position: fixed;
  top: auto;
  bottom: 0;
  left: 0;
  right: auto;
  z-index: 999;
  background: white;
  /* animation: slideDown 0.3s ease-out; */
  width: max-content;
  border-radius: 0 8px 8px 0;
  overflow: hidden;
  box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
  left: -31px;
    transition: all .4s ease;
}

.shipping-threshold-wrapper.open {
    left: 0;
}

.shipping-threshold-wrapper::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

.shipping-threshold-wrapper:hover::before {
  opacity: 1;
}

.shipping-threshold-wrapper.open {
  /* Open state handled by content animation */
}

.shipping-threshold-wrapper.threshold-reached {
  background: linear-gradient(135deg, #f0fff4 0%, #e6f9ed 100%);
}

@keyframes slideDown {
  from {
    transform: translateY(-100%);
  }
  to {
    transform: translateY(0);
  }
}

.shipping-threshold-container {
    max-width: 420px;
    margin: 0;
    padding: 0;
    display: flex;
    align-items: stretch;
    justify-content: space-between;
    position: relative;
}

.shipping-threshold-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 20px;
  flex-wrap: nowrap;
  padding: 9px 15px;
  width: 0;
  overflow: hidden;
  opacity: 0;
  transition: width 0.4s cubic-bezier(0.4, 0, 0.2, 1), 
              opacity 0.3s ease 0.1s;
}

.shipping-threshold-wrapper:hover .shipping-threshold-content,
.shipping-threshold-wrapper.open .shipping-threshold-content {
  width: 350px;
  opacity: 1;
}

.shipping-threshold-text {
  margin: 0;
    font-size: 14px;
    line-height: 1.4;
    flex: 1;
    min-width: 200px;
    color: #141132;
    font-family: Prompt;
    font-size: 15px;
    font-style: normal;
    font-weight: 400;
    line-height: 22px;
    letter-spacing: -.16px;
}

.shipping-threshold-text strong {
  color: #141132;
  font-weight: 600;
}

.progress-circle {
  position: relative;
  width: 90px;
  height: 90px;
  flex-shrink: 0;
}

.progress-ring {
  transform: rotate(-90deg);
}

.progress-ring-circle {
  transition: stroke-dashoffset 0.5s ease, stroke 0.3s ease;
  stroke-linecap: round;
}

.progress-percentage {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 18px;
  font-weight: bold;
      color: #141132;
    font-family: 'Montserrat';
    font-style: normal;
    font-weight: 700;
    line-height: 22px;
    letter-spacing: -.16px;
}

.progress-bar-container {
  display: none;
  flex: 1;
  height: 8px;
  background: #f0f0f0;
  border-radius: 4px;
  overflow: hidden;
  min-width: 150px;
}

.progress-bar {
  height: 100%;
  width: 0;
  transition: width 0.5s ease, background-color 0.3s ease;
  border-radius: 4px;
}



.shipping-threshold-container .threshold-cart {
    background: linear-gradient(102deg, #42c5ef, #0033a0 50% 50%, #42c5ef) !important;
    background-size: 200% 100% !important;
    padding: 16px 12px;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 4px;
    min-width: 56px;
    flex-shrink: 0;
    position: relative;
    z-index: 2;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
}

.shipping-threshold-wrapper:hover .threshold-cart,
.shipping-threshold-wrapper.open .threshold-cart {
  min-width: 4px;
  padding: 0;
  background: linear-gradient(102deg, #42c5ef, #0033a0 50% 50%, #42c5ef) !important;
}

.shipping-threshold-container .threshold-cart svg,
.shipping-threshold-container .threshold-cart .cart-progress-percentage {
  transition: opacity 0.2s ease, transform 0.3s ease;
  opacity: 1;
  transform: scale(1);
}

.shipping-threshold-wrapper:hover .threshold-cart svg,
.shipping-threshold-wrapper:hover .threshold-cart .cart-progress-percentage,
.shipping-threshold-wrapper.open .threshold-cart svg,
.shipping-threshold-wrapper.open .threshold-cart .cart-progress-percentage {
  opacity: 0;
  transform: scale(0.8);
}

.shipping-threshold-container .threshold-cart svg {
    fill: #fff;
    min-width: 30px;
    width: 32px;
}

.shipping-threshold-container .threshold-cart .cart-progress-percentage {
    margin: 0;
    color: #fff;
    font-family: 'Montserrat';
    font-size: 15px;
    font-style: normal;
    font-weight: 500;
    line-height: 22px;
    letter-spacing: -.16px;
}


@media (max-width: 768px) {
  /* .shipping-threshold-content {
    justify-content: center;
    text-align: center;
  }
  
  .progress-circle {
    width: 80px;
    height: 80px;
  }
  
  .progress-ring {
    width: 80px;
    height: 80px;
  }
  
  .progress-percentage {
    font-size: 16px;
  }
  
  .shipping-threshold-text {
    font-size: 14px;
  } */

  .shipping-threshold-wrapper {
    bottom: 50px;
}


}


{% endstylesheet %}