{{ 'template-collection.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'component-search.css' | asset_url | stylesheet_tag }}

{%- if section.settings.enable_filtering or section.settings.enable_sorting -%}
  {{ 'component-facets.css' | asset_url | stylesheet_tag }}
  <script src="{{ 'facets.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- unless section.settings.quick_add == 'none' -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
{%- endunless -%}

{%- if section.settings.quick_add == 'standard' -%}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- if section.settings.quick_add == 'bulk' -%}
  <script src="{{ 'quick-add-bulk.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'price-per-item.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'quick-order-list.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

<script src="{{ 'main-search.js' | asset_url }}" defer="defer"></script>

<style>
  .template-search__header {
    margin-bottom: 3rem;
  }

  .template-search__search {
    margin: 0 auto 3.5rem;
    max-width: 74.1rem;
    display: none;
  }

  .template-search__header {
    text-align: center;
}

  .template-search__search .search {
    margin-top: 3rem;
  }

  .template-search--empty {
    padding-bottom: 18rem;
  }

  @media screen and (min-width: 750px) {
    .template-search__header {
      margin-bottom: 5rem;
    }
  }

  .search__button .icon {
    height: 1.8rem;
  }
</style>

{%- liquid
  assign sort_by = search.sort_by | default: search.default_sort_by
  assign terms = search.terms | escape
  assign search_url = '?q=' | append: terms | append: '&options%5Bprefix%5D=last&sort_by=' | append: sort_by
-%}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{% paginate search.results by 24 %}
  <div class="template-search{% unless search.performed and search.results_count > 0 %} template-search--empty{% endunless %} section-{{ section.id }}-padding">
    <div class="template-search__header page-width{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
      <h1 class="h2 center">
        {%- if search.performed -%}
          {{- 'templates.search.title' | t -}}
        {%- else -%}
          {{- 'general.search.search' | t -}}
        {%- endif -%}
      </h1>
      <div class="template-search__search">
        {%- if settings.predictive_search_enabled -%}
          <predictive-search data-loading-text="{{ 'accessibility.loading' | t }}">
        {%- endif -%}
        <main-search>
          <form action="{{ routes.search_url }}" method="get" role="search" class="search">
            <div class="field">
              <input
                class="search__input field__input"
                id="Search-In-Template"
                type="search"
                name="q"
                value="{{ search.terms | escape }}"
                placeholder="{{ 'general.search.search' | t }}"
                {%- if settings.predictive_search_enabled -%}
                  role="combobox"
                  aria-expanded="false"
                  aria-owns="predictive-search-results"
                  aria-controls="predictive-search-results"
                  aria-haspopup="listbox"
                  aria-autocomplete="list"
                  autocorrect="off"
                  autocomplete="off"
                  autocapitalize="off"
                  spellcheck="false"
                {%- endif -%}
              >
              <label class="field__label" for="Search-In-Template">{{ 'general.search.search' | t }}</label>
              <input name="options[prefix]" type="hidden" value="last">

              {%- if settings.predictive_search_enabled -%}
                <div class="predictive-search predictive-search--search-template" tabindex="-1" data-predictive-search>
                  {%- render 'loading-spinner', class: 'predictive-search__loading-state' -%}
                </div>

                <span class="predictive-search-status visually-hidden" role="status" aria-hidden="true"></span>
              {%- endif -%}

              <button
                type="reset"
                class="reset__button field__button{% if search.terms == blank %} hidden{% endif %}"
                aria-label="{{ 'general.search.reset' | t }}"
              >
                <span class="svg-wrapper">
                  {{- 'icon-reset.svg' | inline_asset_content -}}
                </span>
              </button>
              <button type="submit" class="search__button field__button" aria-label="{{ 'general.search.search' | t }}">
                <span class="svg-wrapper">
                  {{- 'icon-search.svg' | inline_asset_content -}}
                </span>
              </button>
            </div>
          </form>
        </main-search>
        {%- if settings.predictive_search_enabled -%}
          </predictive-search>
        {%- endif -%}
      </div>
      {%- if search.performed -%}
        {%- unless section.settings.enable_filtering or section.settings.enable_sorting -%}
          {%- if search.results_count > 0 -%}
            <p role="status">
              {{ 'templates.search.results_with_count_and_term' | t: terms: search.terms, count: search.results_count }}
            </p>
          {%- endif -%}
        {%- endunless -%}
        {%- if search.results_count == 0 and search.filters == empty -%}
          <p role="status">{{ 'templates.search.no_results' | t: terms: search.terms }}</p>
        {%- endif -%}
      {%- endif -%}
    </div>
    {%- if search.performed -%}
      {%- if section.settings.enable_sorting
        and section.settings.filter_type == 'vertical'
        and search.filters != empty
      -%}
        <facet-filters-form class="facets facets-vertical-sort page-width small-hide">
          <form class="facets-vertical-form" id="FacetSortForm">
            <div class="facet-filters sorting caption">
              <div class="facet-filters__field">
                <h2 class="facet-filters__label caption-large text-body">
                  <label for="SortBy">{{ 'products.facets.sort_by_label' | t }}</label>
                </h2>
                <div class="select">
                  {%- assign sort_by = search.sort_by | default: search.default_sort_by -%}
                  <select
                    name="sort_by"
                    class="facet-filters__sort select__select caption-large"
                    id="SortBy"
                    aria-describedby="a11y-refresh-page-message"
                  >
                    {%- for option in search.sort_options -%}
                      <option
                        value="{{ option.value | escape }}"
                        {% if option.value == sort_by %}
                          selected="selected"
                        {% endif %}
                      >
                        {{ option.name | escape }}
                      </option>
                    {%- endfor -%}
                  </select>
                  <span class="svg-wrapper">
                    {{- 'icon-caret.svg' | inline_asset_content -}}
                  </span>
                </div>
              </div>
            </div>

            <div class="product-count-vertical light" role="status">
              <h2 class="product-count__text text-body">
                <span id="ProductCountDesktop">
                  {%- if search.results_count -%}
                    {{ 'templates.search.results_with_count' | t: terms: search.terms, count: search.results_count }}
                  {%- elsif search.products_count == search.all_products_count -%}
                    {{ 'products.facets.product_count_simple' | t: count: search.products_count }}
                  {%- else -%}
                    {{
                      'products.facets.product_count'
                      | t: product_count: search.products_count, count: search.all_products_count
                    }}
                  {%- endif -%}
                </span>
              </h2>
              {%- render 'loading-spinner' -%}
            </div>
          </form>
        </facet-filters-form>
      {%- endif -%}
      <div
        {% if section.settings.filter_type == 'vertical' %}
          class="facets-vertical page-width"
        {% endif %}
      >
        {%- if search.filters != empty -%}
          {%- if section.settings.enable_filtering or section.settings.enable_sorting -%}
            <aside
              aria-labelledby="verticalTitle"
              class="facets-wrapper{% unless section.settings.enable_filtering %} facets-wrapper--no-filters{% endunless %}{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
              id="main-search-filters"
              data-id="{{ section.id }}"
            >
              {% render 'facets',
                results: search,
                enable_filtering: section.settings.enable_filtering,
                enable_sorting: section.settings.enable_sorting,
                filter_type: section.settings.filter_type,
                paginate: paginate
              %}
            </aside>
          {%- endif -%}
        {%- endif -%}
        <div class="product-grid-container" id="ProductGridContainer">
          {%- if search.results.size == 0 and search.filters != empty -%}
            <div
              class="template-search__results collection collection--empty{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
              id="product-grid"
              data-id="{{ section.id }}"
            >
              <div class="loading-overlay gradient"></div>
              <div class="title-wrapper center">
                <h2 class="title title--primary">
                  {{ 'sections.collection_template.empty' | t -}}
                  <br>
                  {{
                    'sections.collection_template.use_fewer_filters_html'
                    | t: link: search_url, class: 'underlined-link link'
                  }}
                </h2>
              </div>
            </div>
          {%- else -%}
            <div
              class="template-search__results collection{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
              id="product-grid"
              data-id="{{ section.id }}"
            >
              <div class="loading-overlay gradient"></div>
              <ul
                class="grid product-grid  grid--{{ section.settings.columns_mobile }}-col-tablet-down grid--{{ section.settings.columns_desktop }}-col-desktop  {% if section.settings.quick_add == 'bulk' %} collection-quick-add-bulk{% endif %}"
                role="list"
              >
                {%- assign skip_card_product_styles = false -%}
                {%- for item in search.results -%}
                  {% assign lazy_load = false %}
                  {%- if forloop.index > 2 -%}
                    {%- assign lazy_load = true -%}
                  {%- endif -%}

                  <li
                    class="grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                    {% if settings.animations_reveal_on_scroll %}
                      data-cascade
                    {% endif %}
                  >
                    {%- case item.object_type -%}
                      {%- when 'product' -%}
                        {%- capture product_settings -%}{%- if section.settings.product_show_vendor -%}vendor,{%- endif -%}title,price{%- endcapture -%}
                        {% render 'card-product',
                          card_product: item,
                          media_aspect_ratio: section.settings.image_ratio,
                          image_shape: section.settings.image_shape,
                          show_secondary_image: section.settings.show_secondary_image,
                          show_vendor: section.settings.show_vendor,
                          show_rating: section.settings.show_rating,
                          lazy_load: lazy_load,
                          skip_styles: skip_card_product_styles,
                           quick_add: section.settings.quick_add
                        %}
                        
                        {%- assign skip_card_product_styles = true -%}
                      {%- when 'article' -%}
                        {% render 'article-card',
                          article: item,
                          show_image: true,
                          show_date: section.settings.article_show_date,
                          show_author: section.settings.article_show_author,
                          show_badge: true,
                          media_aspect_ratio: 1,
                          lazy_load: lazy_load
                        %}
                      {%- when 'page' -%}
                        <div class="article-card-wrapper card-wrapper underline-links-hover">
                          <div
                            class="card card--card card--text ratio color-{{ settings.blog_card_color_scheme }}"
                            style="--ratio-percent: 100%;"
                          >
                            <div class="card__content">
                              <div class="card__information">
                                <h3 class="card__heading">
                                  <a href="{{ item.url }}" class="full-unstyled-link">
                                    {{ item.title | truncate: 50 | escape }}
                                  </a>
                                </h3>
                              </div>
                              <div class="card__badge {{ settings.badge_position }}">
                                <span class="badge color-{{ settings.color_schemes | first }}">
                                  {{- 'templates.search.page' | t -}}
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                    {%- endcase -%}
                  </li>
                {%- endfor -%}
              </ul>
              {%- if paginate.pages > 1 -%}
                {% render 'pagination', paginate: paginate %}
              {%- endif -%}
            </div>
          {%- endif -%}
        </div>
      </div>
    {%- endif -%}
  </div>
{% endpaginate %}
{% if section.settings.image_shape == 'arch' %}
  {{ 'mask-arch.svg' | inline_asset_content }}
{%- endif -%}


{% schema %}
{
  "name": "t:sections.main-search.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.main-search.settings.columns_desktop.label"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.main-search.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.main-search.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.main-search.settings.columns_mobile.options__2.label"
        }
      ]
    },    
    {
      "type": "header",
      "content": "t:sections.main-search.settings.header__1.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.main-search.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.main-search.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.main-search.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.main-search.settings.image_ratio.label"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "t:sections.all.image_shape.options__1.label"
        },
        {
          "value": "arch",
          "label": "t:sections.all.image_shape.options__2.label"
        },
        {
          "value": "blob",
          "label": "t:sections.all.image_shape.options__3.label"
        },
        {
          "value": "chevronleft",
          "label": "t:sections.all.image_shape.options__4.label"
        },
        {
          "value": "chevronright",
          "label": "t:sections.all.image_shape.options__5.label"
        },
        {
          "value": "diamond",
          "label": "t:sections.all.image_shape.options__6.label"
        },
        {
          "value": "parallelogram",
          "label": "t:sections.all.image_shape.options__7.label"
        },
        {
          "value": "round",
          "label": "t:sections.all.image_shape.options__8.label"
        }
      ],
      "default": "default",
      "label": "t:sections.all.image_shape.label"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.main-search.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.main-search.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.main-search.settings.show_rating.label",
      "info": "t:sections.main-search.settings.show_rating.info"
    },
    {
      "type": "select",
      "id": "quick_add",
      "default": "none",
      "label": "t:sections.main-collection-product-grid.settings.quick_add.label",
      "options": [
        {
          "value": "none",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_1"
        },
        {
          "value": "standard",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_2"
        },
        {
          "value": "bulk",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_3"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__1.content"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
      "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
    },
    {
      "type": "select",
      "id": "filter_type",
      "options": [
        {
          "value": "horizontal",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__1.label"
        },
        {
          "value": "vertical",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__2.label"
        },
        {
          "value": "drawer",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__3.label"
        }
      ],
      "default": "horizontal",
      "label": "t:sections.main-collection-product-grid.settings.filter_type.label"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
    },
    {
      "type": "header",
      "content": "t:sections.main-search.settings.header__2.content"
    },
    {
      "type": "checkbox",
      "id": "article_show_date",
      "default": true,
      "label": "t:sections.main-search.settings.article_show_date.label"
    },
    {
      "type": "checkbox",
      "id": "article_show_author",
      "default": false,
      "label": "t:sections.main-search.settings.article_show_author.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}

<script>
    // Enhanced iWish button initialization for dynamically loaded content
class IWishButtonManager {
  constructor() {
    this.initialized = false;
    this.retryCount = 0;
    this.maxRetries = 8;
    this.retryDelays = [50, 100, 200, 400, 600, 1000, 1500, 2000];
    this.initMethods = [
      'window.iWishInit',
      'jQuery.iWish.init',
      'jQuery.iWish',
      'iWish.init',
      'window.iWish'
    ];
  }

  // Main method to initialize iWish buttons in newly loaded content
  initializeIWishButtons(container = document) {
    console.log('🔄 Starting iWish button initialization...');
    
    // Find all iWish buttons in the container
    const iWishButtons = container.querySelectorAll(
      '.iWishAddColl, .iWishAdd, [data-iwclick], .iwishcheck, [class*="iwish"], [id*="iwish"]'
    );
    
    console.log(`Found ${iWishButtons.length} potential iWish buttons`);
    
    if (iWishButtons.length === 0) {
      console.log('No iWish buttons found');
      return;
    }

    // Reset retry count for new initialization
    this.retryCount = 0;
    
    // Start initialization attempts
    this.attemptInitialization(container, iWishButtons);
    
    // Also try manual event binding as backup
    setTimeout(() => {
      this.manuallyBindEvents(iWishButtons);
    }, 1000);
  }

  // Attempt initialization with multiple methods and retries
  attemptInitialization(container, buttons) {
    if (this.retryCount >= this.maxRetries) {
      console.warn('⚠️ Max initialization attempts reached');
      this.fallbackInitialization(buttons);
      return;
    }

    if (this.retryCount >= this.maxRetries) {
  console.warn("⛔ Max retries reached. Stopping initialization attempts.");
  return;
}


    const delay = this.retryDelays[this.retryCount] || 2000;
    
    setTimeout(() => {
      console.log(`🔄 iWish init attempt ${this.retryCount + 1}/${this.maxRetries}`);
      
      let success = false;

      // Try each initialization method
      for (const method of this.initMethods) {
        if (this.tryInitMethod(method)) {
          console.log(`✅ ${method} successful`);
          success = true;
          break;
        }
      }

      // If no standard method worked, try custom approaches
      if (!success) {
        success = this.tryCustomInit();
      }

      // Verify buttons are actually working
      if (success) {
        success = this.verifyButtonsWorking(buttons);
      }

      if (!success) {
        this.retryCount++;
        this.attemptInitialization(container, buttons);
      } else {
        console.log('✅ iWish buttons successfully initialized');
        this.postInitializationSetup(buttons);
      }
    }, delay);

   if (this.retryCount >= this.maxRetries) {
  console.warn("⛔ Max retries reached. Stopping initialization attempts.");
  return;
}

  }

  // Try a specific initialization method
  tryInitMethod(methodPath) {
    try {
      const parts = methodPath.split('.');
      let obj = window;
      
      // Navigate to the method
      for (let i = 0; i < parts.length - 1; i++) {
        if (!obj[parts[i]]) return false;
        obj = obj[parts[i]];
      }
      
      const method = obj[parts[parts.length - 1]];
      if (typeof method === 'function') {
        method.call(obj);
        return true;
      }
    } catch (error) {
      console.error(`Failed to execute ${methodPath}:`, error);
    }
    return false;
  }

  // Try custom initialization approaches
  tryCustomInit() {
    try {
      // Method 1: Look for iWish object and try common methods
      if (window.iWish && typeof window.iWish === 'object') {
        const methods = ['init', 'initialize', 'setup', 'load', 'refresh'];
        for (const method of methods) {
          if (typeof window.iWish[method] === 'function') {
            window.iWish[method]();
            console.log(`✅ window.iWish.${method}() successful`);
            return true;
          }
        }
      }

      // Method 2: Try jQuery plugin patterns
      if (typeof jQuery !== 'undefined') {
        // Common jQuery plugin initialization patterns
        const jQueryMethods = [
          () => jQuery('.iWishAddColl').iWish(),
          () => jQuery('[data-iwclick]').iWish(),
          () => jQuery.fn.iWish && jQuery('.iwishcheck').iWish(),
          () => jQuery(document).trigger('iwish:init'),
          () => jQuery(document).trigger('iWish:refresh')
        ];

        for (const method of jQueryMethods) {
          try {
            method();
            console.log('✅ jQuery iWish method successful');
            return true;
          } catch (e) {
            // Continue to next method
          }
        }
      }

      // Method 3: Trigger custom events that the iWish script might listen for
      const events = ['iwish:init', 'iWish:refresh', 'wishlist:init', 'DOMContentLoaded'];
      for (const eventName of events) {
        try {
          document.dispatchEvent(new Event(eventName));
        } catch (e) {
          // Continue
        }
      }

    } catch (error) {
      console.error('Custom init failed:', error);
    }
    
    return false;
  }

  // Verify that buttons are actually working
  verifyButtonsWorking(buttons) {
    // Check if buttons have been properly initialized
    for (const button of buttons) {
      // Look for signs that the button has been initialized
      if (button.onclick || 
          button.getAttribute('data-initialized') === 'true' ||
          button.classList.contains('iwish-initialized') ||
          button.hasAttribute('data-iwish-ready')) {
        return true;
      }
    }

    // Check if clicking a button would trigger the expected behavior
    const testButton = buttons[0];
    if (testButton) {
      const originalClick = testButton.onclick;
      let hasHandler = false;
      
      // Create a test click event to see if any handlers respond
      const testEvent = new MouseEvent('click', { bubbles: true });
      try {
        hasHandler = testButton.dispatchEvent(testEvent);
      } catch (e) {
        // Event handling failed
      }

      return hasHandler || originalClick !== null;
    }

    return false;
  }

  // Manually bind events as a fallback
  manuallyBindEvents(buttons) {
    console.log('🔧 Attempting manual event binding for iWish buttons...');
    
    buttons.forEach((button, index) => {
      if (button.getAttribute('data-manual-bound') === 'true') {
        return; // Already manually bound
      }

      // Extract data attributes
      const productId = button.getAttribute('data-product') || 
                       button.closest('[data-product-id]')?.getAttribute('data-product-id');
      const variantId = button.getAttribute('data-variant') || 
                       button.closest('[data-variant-id]')?.getAttribute('data-variant-id');
      const productTitle = button.getAttribute('data-pTitle') || 
                           button.closest('.card-wrapper')?.querySelector('.card__heading a')?.textContent?.trim();

      if (productId) {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          this.handleWishlistClick(button, productId, variantId, productTitle);
        });

        button.setAttribute('data-manual-bound', 'true');
        console.log(`✅ Manually bound button ${index + 1} for product ${productId}`);
      }
    });
  }

  // Handle wishlist button click manually
  handleWishlistClick(button, productId, variantId, productTitle) {
    console.log('🎯 Manual wishlist click:', { productId, variantId, productTitle });
    
    // Try to call the original iWish function if available
    if (window.iWish && typeof window.iWish.addToWishlist === 'function') {
      window.iWish.addToWishlist(productId, variantId);
      return;
    }

    // Try jQuery version
    if (typeof jQuery !== 'undefined' && jQuery.iWish) {
      if (typeof jQuery.iWish.add === 'function') {
        jQuery.iWish.add(productId, variantId);
        return;
      }
    }

    // Fallback: trigger a custom event that the iWish script might listen for
    const wishlistEvent = new CustomEvent('addToWishlist', {
      detail: {
        productId: productId,
        variantId: variantId,
        productTitle: productTitle,
        button: button
      }
    });
    
    document.dispatchEvent(wishlistEvent);
    
    // Visual feedback
  }

  // Show visual feedback for wishlist action
 

  // Fallback initialization when all else fails
  fallbackInitialization(buttons) {
    console.log('🚨 Fallback initialization for iWish buttons');
    
    // Set up a MutationObserver to watch for DOM changes
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          // Check if iWish script has been loaded
          const scripts = document.querySelectorAll('script');
          const iWishScriptLoaded = Array.from(scripts).some(script => 
            script.src.includes('iwish') || script.textContent.includes('iWish')
          );
          
          if (iWishScriptLoaded) {
            setTimeout(() => this.initializeIWishButtons(), 500);
            observer.disconnect();
          }
        }
      });
    });

    observer.observe(document.head, { childList: true });
    
    // Disconnect after 10 seconds to prevent memory leaks
    setTimeout(() => observer.disconnect(), 10000);

    // Also manually bind events as final fallback
    this.manuallyBindEvents(buttons);
  }

  // Post-initialization setup
  postInitializationSetup(buttons) {
    // Add any additional setup needed after successful initialization
    buttons.forEach(button => {
      button.setAttribute('data-iwish-initialized', 'true');
    });

    // Dispatch a custom event to notify that iWish is ready
    document.dispatchEvent(new CustomEvent('iWishReady', { 
      detail: { buttonsCount: buttons.length }
    }));
  }
}

// Create global instance
window.iWishButtonManager = new IWishButtonManager();

// Enhanced loadRecommendations method for your product-recommendations component
// Add this to your existing component
const enhancedLoadRecommendations = function(productId) {
  fetch(`${this.dataset.url}&product_id=${productId}&section_id=${this.dataset.sectionId}`)
    .then((response) => response.text())
    .then((text) => {
      const html = document.createElement('div');
      html.innerHTML = text;
      const recommendations = html.querySelector('product-recommendations');

      if (recommendations?.innerHTML.trim().length) {
        this.innerHTML = recommendations.innerHTML;
        
        // Use the enhanced iWish button manager
        window.iWishButtonManager.initializeIWishButtons(this);
      }

      if (!this.querySelector('slideshow-component') && this.classList.contains('complementary-products')) {
        this.remove();
      }

      if (html.querySelector('.grid__item')) {
        this.classList.add('product-recommendations--loaded');
      }
    })
    .catch((e) => {
      console.error(e);
    });
};

// Auto-initialize on DOM ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.iWishButtonManager.initializeIWishButtons();
  });
} else {
  window.iWishButtonManager.initializeIWishButtons();
}

// Also initialize when new content is loaded via AJAX
document.addEventListener('shopify:section:load', () => {
  setTimeout(() => {
    window.iWishButtonManager.initializeIWishButtons();
  }, 100);
});

document.addEventListener('afterFilterUpdate', () => {
  console.log("🔄 Filter update detected");
  window.iWishButtonManager.initializeIWishButtons(document.querySelector('#ProductGridContainer'));
});


// Observe product grid container for AJAX reloads
const productGrid = document.querySelector('#ProductGridContainer, .collection, .product-grid');

if (productGrid) {
  const observer = new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        console.log("🔄 Product grid updated, re-initializing iWish buttons...");
        window.iWishButtonManager.initializeIWishButtons(productGrid);
      }
    }
  });

  observer.observe(productGrid, { childList: true, subtree: true });
}


</script>
